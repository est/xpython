--- Python-linux/Lib/distutils/ccompiler.py.orig	2007-03-30 08:06:40.000000000 +0200
+++ Python-linux/Lib/distutils/ccompiler.py	2007-03-30 08:07:23.000000000 +0200
@@ -1101,6 +1101,8 @@
                                "Cygwin port of GNU C Compiler for Win32"),
                    'mingw32': ('cygwinccompiler', 'Mingw32CCompiler',
                                "Mingw32 port of GNU C Compiler for Win32"),
+                   'xmingw32': ('cygwinccompiler', 'xMingw32CCompiler',
+                               "Mingw32 cross compilation to Win32"),
                    'bcpp':    ('bcppcompiler', 'BCPPCompiler',
                                "Borland C++ Compiler"),
                    'mwerks':  ('mwerkscompiler', 'MWerksCompiler',
--- Python-linux/Lib/distutils/cygwinccompiler.py.orig	2007-03-30 08:03:43.000000000 +0200
+++ Python-linux/Lib/distutils/cygwinccompiler.py	2007-03-30 08:06:09.000000000 +0200
@@ -335,6 +335,62 @@
 
 # class Mingw32CCompiler
 
+class xMingw32CCompiler (CygwinCCompiler):
+
+    compiler_type = 'xmingw32'
+
+    def __init__ (self,
+                  verbose=0,
+                  dry_run=0,
+                  force=0):
+
+        CygwinCCompiler.__init__ (self, verbose, dry_run, force)
+
+        # ld_version >= "2.13" support -shared so use it instead of
+        # -mdll -static
+        if self.ld_version >= "2.13":
+            shared_option = "-shared"
+        else:
+            shared_option = "-mdll -static"
+
+        # A real mingw32 doesn't need to specify a different entry point,
+        # but cygwin 2.91.57 in no-cygwin-mode needs it.
+        if self.gcc_version <= "2.91.57":
+            entry_point = '--entry _DllMain@12'
+        else:
+            entry_point = ''
+
+        self.set_executables(compiler='i386-mingw32msvc-gcc -DPy_BUILD_CORE -O -Wall',
+                             compiler_so='i386-mingw32msvc-gcc -DPy_BUILD_CORE  -mdll -O -Wall',
+                             compiler_cxx='i386-mingw32msvc-g++ -DPy_BUILD_CORE  -O -Wall',
+                             linker_exe='i386-mingw32msvc-gcc',
+                             linker_so='echo i386-mingw32msvc-%s %s %s'
+                                        % (self.linker_dll, shared_option,
+                                           entry_point))
+        # Maybe we should also append -mthreads, but then the finished
+        # dlls need another dll (mingwm10.dll see Mingw32 docs)
+        # (-mthreads: Support thread-safe exception handling on `Mingw32')
+
+        # no additional libraries needed
+        self.dll_libraries=[]
+
+        # Include the appropriate MSVC runtime library if Python was built
+        # with MSVC 7.0 or 7.1.
+        msc_pos = sys.version.find('MSC v.')
+        if msc_pos != -1:
+            msc_ver = sys.version[msc_pos+6:msc_pos+10]
+            if msc_ver == '1300':
+                # MSVC 7.0
+                self.dll_libraries = ['msvcr70']
+            elif msc_ver == '1310':
+                # MSVC 7.1
+                self.dll_libraries = ['msvcr71']
+
+    # __init__ ()
+
+# class xMingw32CCompiler
+
+
 # Because these compilers aren't configured in Python's pyconfig.h file by
 # default, we should at least warn the user if he is using a unmodified
 # version.
